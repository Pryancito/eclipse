[source]
git = "https://gitlab.redox-os.org/redox-os/drivers.git"

[build]
template = "custom"
script = """
# Drivers that are built on all architectures, and NOT in drivers-initfs
BINS=(
    ahcid
    alxd
    e1000d
    ihdad
    ixgbed
    nvmed
    pcid
    pcid-spawner
    rtl8139d
    rtl8168d
    usbctl
    usbhidd
    usbhubd
    usbscsid
    virtio-netd
    xhcid
    inputd
)

# Add additional drivers to the list to build, that are not in drivers-initfs
# depending on the target architecture
case "${TARGET}" in
    i686-unknown-redox | x86_64-unknown-redox)
        BINS+=(ac97d bgad sb16d vboxd nvidiad amdd inteld)
        ;;
    *)
        ;;
esac

#Build each driver in the list
mkdir -pv "${COOKBOOK_STAGE}/usr/bin" "${COOKBOOK_STAGE}/usr/lib/drivers"
export CARGO_PROFILE_RELEASE_OPT_LEVEL=s
export CARGO_PROFILE_RELEASE_PANIC=abort
"${COOKBOOK_CARGO}" build ${build_flags} \
    --manifest-path "${COOKBOOK_SOURCE}/Cargo.toml" \
    $(for bin in "${BINS[@]}"; do echo "-p" "${bin}"; done)
for bin in "${BINS[@]}"
do
    if [[ "${bin}" == "inputd" || "${bin}" == "pcid" || "${bin}" == "pcid-spawner" ]]; then
        cp -v "target/${TARGET}/${build_type}/${bin}" "${COOKBOOK_STAGE}/usr/bin"
    else
        cp -v "target/${TARGET}/${build_type}/${bin}" "${COOKBOOK_STAGE}/usr/lib/drivers"
    fi
done

mkdir -pv "${COOKBOOK_STAGE}/etc/pcid"
cp -v "${COOKBOOK_SOURCE}/initfs.toml" "${COOKBOOK_STAGE}/etc/pcid/initfs.toml"

# Copiar archivos de configuración PCI para detección automática de drivers
# Incluye nvidiad.toml, amdd.toml, inteld.toml para los nuevos drivers de GPU
mkdir -pv "${COOKBOOK_STAGE}/etc/pcid.d"
find "${COOKBOOK_SOURCE}" -maxdepth 4 -type f -name 'config.toml' | while read conf
do
    driver="$(basename "$(dirname "$conf")")"
    cp -v "$conf" "${COOKBOOK_STAGE}/etc/pcid.d/$driver.toml"
done

## multi-gpud desactivado temporalmente

# Crear script de auto-detección de GPUs
cat > "${COOKBOOK_STAGE}/usr/bin/gpu-detect" << 'GPU_DETECT'
#!/usr/bin/env ion
# Detecta y reporta el estado de los drivers GPU
echo "GPU Detection Report:"
echo "===================="

# Ver qué displays están disponibles
ls /scheme/ | grep display | while read display
    echo "✓ Display scheme: $display"
end

# Ver qué drivers GPU están corriendo
ps | grep -E "(nvidia|amd|intel|multi-gpu)" | while read line
    echo "✓ Process: $line"
end

echo ""
echo "PCI Graphics Devices:"
# Listar dispositivos gráficos (clase 0x03)
# En un sistema real esto mostraría las GPUs
GPU_DETECT

chmod +x "${COOKBOOK_STAGE}/usr/bin/gpu-detect"

# Ya no necesitamos scripts de fallback aquí, vesad se lanza en init.rc
# y orbital se lanza desde desktop.toml/20_orbital
"""
